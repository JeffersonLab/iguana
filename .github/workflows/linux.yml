name: Linux

on:
  pull_request:
  push:
    branches: [ main ]
    tags: [ '*' ]
  schedule:
    - cron: '15 7 * * 0' # Sundays at 0715Z

jobs:

  linux:
    name: Linux (latest)
    uses: ./.github/workflows/ci.yml
    with:
      id: linux-latest
      runner: ubuntu-latest
      container: archlinux/archlinux:latest
      # NOTE: `b_sanitize=memory` is not used because `libc++` needs to be re-compiled with `-fsanitize=memory`, otherwise
      #        we are bothered by false positives (e.g., from `std::map` insertion)
      # FIXME: re-enable ubsan when meson 1.5+ is available:
      #        { "id": "undefined-sanitizer", "CC": "clang", "CXX": "clang++", "opts": "-Dbuildtype=debug   -Dz_require_root=true   -Db_sanitize=undefined -Db_lundef=false -Db_pie=true" },
      matrix: >-
        {
          "id": [
            "cpp",
            "coverage",
            "address-sanitizer",
            "thread-sanitizer",
            "undefined-sanitizer",
            "leak-sanitizer",
            "noROOT",
            "python"
          ],
          "include": [
            { "id": "cpp",                 "CC": "gcc",   "CXX": "g++",     "opts": "-Dbuildtype=release -Dz_require_root=true"  },
            { "id": "coverage",            "CC": "gcc",   "CXX": "g++",     "opts": "-Dbuildtype=release -Dz_require_root=true   -Db_coverage=true"     },
            { "id": "address-sanitizer",   "CC": "clang", "CXX": "clang++", "opts": "-Dbuildtype=debug   -Dz_require_root=true   -Db_sanitize=address   -Db_lundef=false -Db_pie=true" },
            { "id": "thread-sanitizer",    "CC": "clang", "CXX": "clang++", "opts": "-Dbuildtype=debug   -Dz_require_root=true   -Db_sanitize=thread    -Db_lundef=false -Db_pie=true" },
            { "id": "leak-sanitizer",      "CC": "clang", "CXX": "clang++", "opts": "-Dbuildtype=debug   -Dz_require_root=true   -Db_sanitize=leak      -Db_lundef=false -Db_pie=true" },
            { "id": "noROOT",              "CC": "gcc",   "CXX": "g++",     "opts": "-Dbuildtype=release -Dz_require_root=false" },
            { "id": "python",              "CC": "gcc",   "CXX": "g++",     "opts": "-Dbuildtype=release -Dz_require_root=true   -Dbind_python=true"    },
            { "id": "fortran",             "CC": "gcc",   "CXX": "g++",     "opts": "-Dbuildtype=release -Dz_require_root=true   -Dbind_fortran=true"   }
          ]
        }

  issue_bot:
    name: Issue bot
    if: ${{ github.event_name == 'schedule' && ( cancelled() || failure() ) }}
    runs-on: ubuntu-latest
    needs: [ linux ]
    permissions:
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WORKFLOW_ID: linux-latest
          RUN_ID: ${{ github.run_id }}
          REPO_URL: ${{ github.event.repository.html_url }}
        with:
          filename: .github/schedule-issue.md
